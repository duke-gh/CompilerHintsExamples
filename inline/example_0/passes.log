*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (pre inlining) ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4, !tbaa !2
  %3 = load i32, i32* %2, align 4, !tbaa !2
  %4 = sitofp i32 %3 to double
  %5 = fdiv double %4, 1.000000e+02
  %6 = call double @sin(double %5) #3
  %7 = load i32, i32* %2, align 4, !tbaa !2
  %8 = sitofp i32 %7 to double
  %9 = fdiv double %8, 1.000000e+02
  %10 = call double @cos(double %9) #3
  %11 = fadd double %6, %10
  ret double %11
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4, !tbaa !2
  %3 = load i32, i32* %2, align 4, !tbaa !2
  %4 = sitofp i32 %3 to double
  %5 = fdiv double %4, 1.000000e+02
  %6 = call double @sin(double %5) #3
  %7 = load i32, i32* %2, align 4, !tbaa !2
  %8 = sitofp i32 %7 to double
  %9 = fdiv double %8, 1.000000e+02
  %10 = call double @cos(double %9) #3
  %11 = fadd double %6, %10
  ret double %11
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #3
  %5 = sitofp i32 %0 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = call double @cos(double %6) #3
  %8 = fadd double %4, %7
  ret double %8
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #3
  %5 = call double @cos(double %3) #3
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #3
  %5 = call double @cos(double %3) #3
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (pre inlining) ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #3
  store i32 100000000, i32* %1, align 4, !tbaa !2
  %5 = bitcast double* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #3
  store double 0.000000e+00, double* %2, align 8, !tbaa !6
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #3
  store i32 0, i32* %3, align 4, !tbaa !2
  br label %7

; <label>:7:                                      ; preds = %17, %0
  %8 = load i32, i32* %3, align 4, !tbaa !2
  %9 = icmp slt i32 %8, 100000000
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11) #3
  br label %20

; <label>:12:                                     ; preds = %7
  %13 = load i32, i32* %3, align 4, !tbaa !2
  %14 = call double @_Z4calci(i32 %13)
  %15 = load double, double* %2, align 8, !tbaa !6
  %16 = fadd double %15, %14
  store double %16, double* %2, align 8, !tbaa !6
  br label %17

; <label>:17:                                     ; preds = %12
  %18 = load i32, i32* %3, align 4, !tbaa !2
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4, !tbaa !2
  br label %7

; <label>:20:                                     ; preds = %10
  %21 = load double, double* %2, align 8, !tbaa !6
  %22 = bitcast double* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #3
  %23 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %23) #3
  ret double %21
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #3
  store i32 100000000, i32* %1, align 4, !tbaa !2
  %5 = bitcast double* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #3
  store double 0.000000e+00, double* %2, align 8, !tbaa !6
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #3
  store i32 0, i32* %3, align 4, !tbaa !2
  br label %7

; <label>:7:                                      ; preds = %15, %0
  %8 = load i32, i32* %3, align 4, !tbaa !2
  %9 = icmp slt i32 %8, 100000000
  br i1 %9, label %15, label %10

; <label>:10:                                     ; preds = %7
  %11 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11) #3
  %12 = load double, double* %2, align 8, !tbaa !6
  %13 = bitcast double* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #3
  %14 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #3
  ret double %12

; <label>:15:                                     ; preds = %7
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = call double @_Z4calci(i32 %16)
  %18 = load double, double* %2, align 8, !tbaa !6
  %19 = fadd double %18, %17
  store double %19, double* %2, align 8, !tbaa !6
  %20 = load i32, i32* %3, align 4, !tbaa !2
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4, !tbaa !2
  br label %7
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp slt i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nsw i32 %3, 1
  br label %1
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp slt i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nsw i32 %3, 1
  br label %1
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp slt i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nsw i32 %3, 1
  br label %1
}
*** IR Dump After Force set function attributes ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #3
  %5 = call double @cos(double %3) #3
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) #1

; Function Attrs: nounwind
declare double @cos(double) #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp slt i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nsw i32 %3, 1
  br label %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Infer set function attributes ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #3
  %5 = call double @cos(double %3) #3
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) #1

; Function Attrs: nounwind
declare double @cos(double) #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp slt i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nsw i32 %3, 1
  br label %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Interprocedural Sparse Conditional Constant Propagation ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #3
  %5 = call double @cos(double %3) #3
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) #1

; Function Attrs: nounwind
declare double @cos(double) #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp slt i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nsw i32 %3, 1
  br label %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Called Value Propagation ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #3
  %5 = call double @cos(double %3) #3
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) #1

; Function Attrs: nounwind
declare double @cos(double) #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp slt i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nsw i32 %3, 1
  br label %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Global Variable Optimizer ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp slt i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nsw i32 %3, 1
  br label %1
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Promote Memory to Register ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Promote Memory to Register ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp slt i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nsw i32 %3, 1
  br label %1
}
*** IR Dump After Dead Argument Elimination ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp slt i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nsw i32 %3, 1
  br label %1
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Function Integration/Inlining ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Early CSE w/ MemorySSA ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Conditionally eliminate dead library calls ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After PGOMemOPSize ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = call double @sin(double %3) #2
  %5 = call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After MergedLoadStoreMotion ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Global Value Numbering ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %8, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %9, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = call double @_Z4calci(i32 %3)
  %8 = fadd double %2, %7
  %9 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = call double @sin(double %8) #2
  %10 = call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = call double @sin(double %8) #2
  %10 = call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = call double @sin(double %8) #2
  %10 = call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Early CSE w/ MemorySSA ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = call double @sin(double %8) #2
  %10 = call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = call double @sin(double %8) #2
  %10 = call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = call double @sin(double %8) #2
  %10 = call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = call double @sin(double %8) #2
  %10 = call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = call double @sin(double %8) #2
  %10 = call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Conditionally eliminate dead library calls ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = call double @sin(double %8) #2
  %10 = call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After PGOMemOPSize ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = call double @sin(double %8) #2
  %10 = call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = tail call double @sin(double %8) #2
  %10 = tail call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = tail call double @sin(double %8) #2
  %10 = tail call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = tail call double @sin(double %8) #2
  %10 = tail call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = tail call double @sin(double %8) #2
  %10 = tail call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %6, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %12, %6 ]
  %3 = phi i32 [ 0, %0 ], [ %13, %6 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  ret double %2

; <label>:6:                                      ; preds = %1
  %7 = sitofp i32 %3 to double
  %8 = fdiv double %7, 1.000000e+02
  %9 = tail call double @sin(double %8) #2
  %10 = tail call double @cos(double %8) #2
  %11 = fadd double %9, %10
  %12 = fadd double %2, %11
  %13 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %1

; <label>:1:                                      ; preds = %7, %0
  %2 = phi double [ 0.000000e+00, %0 ], [ %13, %7 ]
  %3 = phi i32 [ 0, %0 ], [ %14, %7 ]
  %4 = icmp ult i32 %3, 100000000
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %1
  %6 = phi double [ %2, %1 ]
  ret double %6

; <label>:7:                                      ; preds = %1
  %8 = sitofp i32 %3 to double
  %9 = fdiv double %8, 1.000000e+02
  %10 = tail call double @sin(double %9) #2
  %11 = tail call double @cos(double %9) #2
  %12 = fadd double %10, %11
  %13 = fadd double %2, %12
  %14 = add nuw nsw i32 %3, 1
  br label %1
}
*** IR Dump After Rotate Loops ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %0, %3
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp ult i32 %12, 100000000
  br i1 %13, label %3, label %1

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2
*** IR Dump After Loop Invariant Code Motion ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %0, %3
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp ult i32 %12, 100000000
  br i1 %13, label %3, label %1

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2
*** IR Dump After Unswitch loops ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %0, %3
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp ult i32 %12, 100000000
  br i1 %13, label %3, label %1

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %0, %3
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp ult i32 %12, 100000000
  br i1 %13, label %3, label %1
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %0, %2
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp ult i32 %11, 100000000
  br i1 %12, label %2, label %1
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %0, %2
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp ult i32 %11, 100000000
  br i1 %12, label %2, label %1
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %0, %2
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp ult i32 %11, 100000000
  br i1 %12, label %2, label %1
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %0, %3
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp ult i32 %12, 100000000
  br i1 %13, label %3, label %1
}
*** IR Dump After Induction Variable Simplification ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %0, %3
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp ne i32 %12, 100000000
  br i1 %13, label %3, label %1

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2
*** IR Dump After Recognize loop idioms ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %0, %3
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp ne i32 %12, 100000000
  br i1 %13, label %3, label %1

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2
*** IR Dump After Delete dead loops ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %0, %3
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp ne i32 %12, 100000000
  br i1 %13, label %3, label %1

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2
*** IR Dump After Unroll loops ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %0, %3
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp ne i32 %12, 100000000
  br i1 %13, label %3, label %1

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2
*** IR Dump After MergedLoadStoreMotion ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %0, %3
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp ne i32 %12, 100000000
  br i1 %13, label %3, label %1
}
*** IR Dump After Global Value Numbering ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %0, %2
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp ne i32 %11, 100000000
  br i1 %12, label %2, label %1
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %0, %2
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp ne i32 %11, 100000000
  br i1 %12, label %2, label %1
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %0, %2
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp ne i32 %11, 100000000
  br i1 %12, label %2, label %1
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %0, %2
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp ne i32 %11, 100000000
  br i1 %12, label %2, label %1
}
*** IR Dump After Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %0, %2
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp ne i32 %11, 100000000
  br i1 %12, label %2, label %1
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3
}
*** IR Dump After Loop Invariant Code Motion ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Function Integration/Inlining ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Eliminate Available Externally Globals ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Deduce function attributes in RPO ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Global Variable Optimizer ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Dead Global Elimination ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Float to int ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Loop Distribution ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Loop Vectorization ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Loop Load Elimination ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After SLP Vectorizer ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Float to int ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3
}
*** IR Dump After Rotate Loops ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2
*** IR Dump After Loop Distribution ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3
}
*** IR Dump After Loop Vectorization ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3
}
*** IR Dump After Loop Load Elimination ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After SLP Vectorizer ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %10

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %10, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = add nuw nsw i32 %3, 1
  %12 = icmp eq i32 %11, 100000000
  br i1 %12, label %1, label %2
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %11, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %12, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %11, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = icmp eq i32 %12, 100000000
  br i1 %13, label %1, label %3
}
*** IR Dump After Unroll loops ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = add nuw nsw i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %12, 1
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %17

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %18, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %17, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = or i32 %3, 1
  %12 = sitofp i32 %11 to double
  %13 = fdiv double %12, 1.000000e+02
  %14 = tail call double @sin(double %13) #2
  %15 = tail call double @cos(double %13) #2
  %16 = fadd double %14, %15
  %17 = fadd double %10, %16
  %18 = add nuw nsw i32 %3, 2
  %19 = icmp eq i32 %18, 100000000
  br i1 %19, label %1, label %2
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %17

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %18, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %17, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = or i32 %3, 1
  %12 = sitofp i32 %11 to double
  %13 = fdiv double %12, 1.000000e+02
  %14 = tail call double @sin(double %13) #2
  %15 = tail call double @cos(double %13) #2
  %16 = fadd double %14, %15
  %17 = fadd double %10, %16
  %18 = add nuw nsw i32 %3, 2
  %19 = icmp eq i32 %18, 100000000
  br i1 %19, label %1, label %2
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %17

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %18, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %17, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = or i32 %3, 1
  %12 = sitofp i32 %11 to double
  %13 = fdiv double %12, 1.000000e+02
  %14 = tail call double @sin(double %13) #2
  %15 = tail call double @cos(double %13) #2
  %16 = fadd double %14, %15
  %17 = fadd double %10, %16
  %18 = add nuw nsw i32 %3, 2
  %19 = icmp eq i32 %18, 100000000
  br i1 %19, label %1, label %2
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = or i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %4, 2
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3
}
*** IR Dump After Loop Invariant Code Motion ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = or i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %4, 2
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2
*** IR Dump After Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = or i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %4, 2
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3
}
*** IR Dump After Strip Unused Function Prototypes ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = or i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %4, 2
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Dead Global Elimination ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = or i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %4, 2
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Merge Duplicate Global Constants ***; ModuleID = 'inline.cpp'
source_filename = "inline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = or i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %4, 2
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Remove redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Hoist/decompose integer division and remainder ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z4calci(i32) local_unnamed_addr #0 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double %2, 1.000000e+02
  %4 = tail call double @sin(double %3) #2
  %5 = tail call double @cos(double %3) #2
  %6 = fadd double %4, %5
  ret double %6
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = or i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %4, 2
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = or i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %4, 2
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2

; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = or i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %4, 2
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3
}
*** IR Dump After Loop Sink ***
; Preheader:
  br label %3

; Loop:
; <label>:3:                                      ; preds = %3, %0
  %4 = phi i32 [ 0, %0 ], [ %19, %3 ]
  %5 = phi double [ 0.000000e+00, %0 ], [ %18, %3 ]
  %6 = sitofp i32 %4 to double
  %7 = fdiv double %6, 1.000000e+02
  %8 = tail call double @sin(double %7) #2
  %9 = tail call double @cos(double %7) #2
  %10 = fadd double %8, %9
  %11 = fadd double %5, %10
  %12 = or i32 %4, 1
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @sin(double %14) #2
  %16 = tail call double @cos(double %14) #2
  %17 = fadd double %15, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i32 %4, 2
  %20 = icmp eq i32 %19, 100000000
  br i1 %20, label %1, label %3

; Exit blocks
; <label>:1:                                      ; preds = %3
  %2 = phi double [ %18, %3 ]
  ret double %2
*** IR Dump After Remove redundant instructions ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %17

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %18, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %17, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = or i32 %3, 1
  %12 = sitofp i32 %11 to double
  %13 = fdiv double %12, 1.000000e+02
  %14 = tail call double @sin(double %13) #2
  %15 = tail call double @cos(double %13) #2
  %16 = fadd double %14, %15
  %17 = fadd double %10, %16
  %18 = add nuw nsw i32 %3, 2
  %19 = icmp eq i32 %18, 100000000
  br i1 %19, label %1, label %2
}
*** IR Dump After Hoist/decompose integer division and remainder ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %17

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %18, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %17, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = or i32 %3, 1
  %12 = sitofp i32 %11 to double
  %13 = fdiv double %12, 1.000000e+02
  %14 = tail call double @sin(double %13) #2
  %15 = tail call double @cos(double %13) #2
  %16 = fadd double %14, %15
  %17 = fadd double %10, %16
  %18 = add nuw nsw i32 %3, 2
  %19 = icmp eq i32 %18, 100000000
  br i1 %19, label %1, label %2
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define double @_Z7get_resv() local_unnamed_addr #0 {
  br label %2

; <label>:1:                                      ; preds = %2
  ret double %17

; <label>:2:                                      ; preds = %2, %0
  %3 = phi i32 [ 0, %0 ], [ %18, %2 ]
  %4 = phi double [ 0.000000e+00, %0 ], [ %17, %2 ]
  %5 = sitofp i32 %3 to double
  %6 = fdiv double %5, 1.000000e+02
  %7 = tail call double @sin(double %6) #2
  %8 = tail call double @cos(double %6) #2
  %9 = fadd double %7, %8
  %10 = fadd double %4, %9
  %11 = or i32 %3, 1
  %12 = sitofp i32 %11 to double
  %13 = fdiv double %12, 1.000000e+02
  %14 = tail call double @sin(double %13) #2
  %15 = tail call double @cos(double %13) #2
  %16 = fadd double %14, %15
  %17 = fadd double %10, %16
  %18 = add nuw nsw i32 %3, 2
  %19 = icmp eq i32 %18, 100000000
  br i1 %19, label %1, label %2
}
